// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Medicine {
  id            String             @id @default(uuid()) @db.Uuid
  medicineCode  String             @unique
  nameEN        String
  nameTH        String
  catagory      String
  amount        Decimal            @default(0) @db.Decimal(10, 2)
  current_price Decimal            @default(0) @map("current_price") @db.Decimal(10, 2)
  advice        String? // optional
  items         PrescriptionItem[] // one-to-many
  // shelves       Shelf[]            // relation to Shelf

  @@map("Medicine")
}

model PrescriptionItem {
  id String @id @default(uuid()) @db.Uuid

  // ทำให้ลบ Medicine ได้โดยไม่ชน FK: ให้ NULL ได้ + ตั้ง onDelete: SetNull
  medicineId     String? @map("medicineListed") @db.Uuid
  prescriptionId String  @map("prescription") @db.Uuid

  instruction String? // optional
  amount      Decimal @default(0) @db.Decimal(10, 2)
  price       Decimal @default(0) @db.Decimal(10, 2)

  // ใช้ชื่อ camelCase ในโค้ด แต่ map ไปคอลัมน์เดิมชื่อ deleteAT
  deletedAt DateTime? @map("deleteAT")

  // relations
  medicine     Medicine?    @relation(fields: [medicineId], references: [id], onDelete: SetNull)
  prescription Prescription @relation(fields: [prescriptionId], references: [id])

  @@index([prescriptionId])
  @@index([medicineId])
  @@map("PrescriptionItem")
}

model Prescription {
  id           String   @id @default(uuid()) @db.Uuid
  name_patient String
  name_docter  String
  date         DateTime @db.Date //@default(now()) @db.Timestamptz   // เวลา ณ ขณะสร้าง (UTC)
  // createdAt    DateTime @default(now()) @map("createdAT") @db.Timestamptz
  // updatedAt    DateTime? @updatedAt @map("updatedAT") @db.Timest //null ได้เพราะอาจยังไม่เคยอัพเดต
  // status      String  @default("active") // active, cancelled, updated, completed

  items PrescriptionItem[] // one-to-many

  @@map("Prescription")
}

// model Room {
//   id          String   @id @default(uuid()) @db.Uuid
//   name        String
//   roomCode    String   @unique
//   description String?
//   createdAt   DateTime @default(now()) @map("createdAT")
//   updatedAt   DateTime @updatedAt @map("updatedAT")
//   zones       Zone[]
// }

// model Zone {
//   id          String   @id @default(uuid()) @db.Uuid
//   roomId      String   @map("room") @db.Uuid
//   name        String
//   description String?
//   createdAt   DateTime @default(now()) @map("createdAT")
//   updatedAt   DateTime @updatedAt @map("updatedAT")
//   racks       Rack[]

//   room Room @relation(fields: [roomId], references: [id])
// }

// model Rack {
//   id          String   @id @default(uuid()) @db.Uuid
//   zoneId      String   @map("zone") @db.Uuid
//   rackCode    String   @unique
//   name        String
//   description String?
//   createdAt   DateTime @default(now()) @map("createdAT")
//   updatedAt   DateTime @updatedAt @map("updatedAT")
//   shelves     Shelf[]

//   zone Zone @relation(fields: [zoneId], references: [id])
// }

// model Shelf {
//   id          String       @id @default(uuid()) @db.Uuid
//   rackId      String       @map("rack") @db.Uuid
//   shelfCode   String       @unique
//   name        String
//   description String?
//   medicineId  String       @map("medicine") @db.Uuid
//   createdAt   DateTime     @default(now()) @map("createdAT")
//   updatedAt   DateTime     @updatedAt @map("updatedAT")
//   batches     ShelfBatch[]
//   rack        Rack         @relation(fields: [rackId], references: [id])
//   // medicine   Medicine @relation(fields: [medicineId], references: [id])
// }

// model ShelfBatch {
//   id        String   @id @default(uuid()) @db.Uuid
//   shelfId   String   @map("shelf") @db.Uuid
//   // medicineBatch String   @map("medicineBatch") @db.Uuid
//   quantity  Int      @default(0)
//   createdAt DateTime @default(now()) @map("createdAT")
//   updatedAt DateTime @updatedAt @map("updatedAT")

//   shelf Shelf @relation(fields: [shelfId], references: [id])
//   // medicineBatch MedicineBatch @relation(fields: [medicineBatch], references: [id])
// }
